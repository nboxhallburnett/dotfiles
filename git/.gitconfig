# Source private git config data
[include]
    path = ~/.gitconfig_private

[color]
    branch = auto
    diff = auto
    status = auto

[color "branch"]
    current = red reverse
    local = blue
    remote = green

[color "diff"]
    meta = yellow
    frag = magenta
    old = red bold
    new = green
    plain = white
    whitespace = blue reverse

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[credential]
    helper = osxkeychain

[alias]
    st = status -s

    cl = clone

    ci = commit
    cm = commit -m
    cma = commit -a -m
    ca = commit --amend
    amend = commit --amend

    ai = add --interactive

    co = checkout
    br = branch

    # compact history
    le = log --oneline --decorate
    # detailed history
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --stat
    # history tree
    lds = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --graph

    # changes in the last commit (List Last Commit)
    llc = show --stat --oneline HEAD

    # overwrite default diff with word-diff
    diff = diff --word-diff
    d = diff --word-diff
    # stat the currently unstaged changes
    ds = diff --stat
    # list modified files in last commit
    dl = "!git ll -1"
    # diff last commit
    dlc = diff --cached HEAD^
    # diff-so-fancy
    dsf = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git diff --color $@ | diff-so-fancy ; }; f"

    # fetch and checkout PRs
    pr = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
    # fetch and checkout PRs, merged with master
    pr-master = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull/$1/head:pr/$1 && git checkout pr/$1 && GIT_MERGE_AUTOEDIT=no git merge ${2:-$(git remote |grep ^upstream || echo origin)}/master; }; f"
    # delete all local pr branches
    pr-clean = "!git for-each-ref refs/heads/pr/* --format=\"%(refname)\" | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
    # fetch and checkout a PR from a provided remote
    pr-remote = "!f() { git fetch -fu $1 refs/pull/$2/head:$1/pr/$2 && git checkout $1/pr/$2; }; f"

    # print out a list of all aliases
    aliases = "!git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort"

[rebase]
    autosquash = true

[push]
    # include annotated tags with pushes
    followTags = true

[core]
    whitespace = indent-with-non-tab,tabwidth=4
