#! /usr/bin/env node

/**
 * Script used in tmux to display custom info
 */
const { promisify } = require('util');

const spotify = require('spotify-node-applescript');

// Define output length
const maxLen = process.argv[2] && Math.floor(process.argv[2] / 4 * 2) || 75;
const rightLen = 25; // ' 11/11/11   1:23:45 pm '.length
const strLen = maxLen - rightLen;
const suffix = '...';

formatOutput(
	currentlyPlaying()
	// Add other functions else here to include it in the output
).then(output => {
	output = output || '¯\\_(ツ)_/¯';

	process.stdout.write(
		maxLen < 40
			? ''
			: output.length <= strLen
				? output
				: (output.substring(0, strLen - suffix.length) + suffix)
	);
	process.exit(0);
});

// Format the any music that is currently, or was recently, playing
async function currentlyPlaying() {
	let data = {
		track: await promisify(spotify.getTrack)(),
		state: await promisify(spotify.getState)()
	};
	let output = '';

	if (data && data.track && data.track.duration) {
		const total = _msToMin(data.track.duration);
		const current = _msToMin(data.state.position * 1000);
		const str = `${data.state.state === 'playing' ? '▶' : 'Ⅱ'} ${data.track.artist} - ${data.track.name}`;
		const time = `${current}/${total}`;

		return (str.length + time.length + 6 + output.length > strLen
			? str.substr(0, strLen - (time.length + output.length + 7)) + '...'
			: str + ' -')
			+ ' ' + time;
	}
	return '';
}

async function formatOutput(...data) {
	let output = '';
	(await Promise.all(data)).forEach(format);
	return output;

	function format(txt) {
		output = !txt || !output
			? output || txt || ''
			: `${output} | ${txt}`;
	}
}

function _msToMin(ts) {
	const m = ts / 1000;
	return `${Math.floor(m / 60)}:${String('00' + Math.floor(m % 60)).slice(-2)}`;
}
